#!/usr/bin/env python
# import roslib
# roslib.load_manifest('learning_tf')
import rospy
import tf

if __name__ == '__main__':
    rospy.init_node('map_tf_broadcaster')
    # turtlename = rospy.get_param('~turtle')
    # rospy.Subscriber('/%s/pose' % turtlename,
    #                  turtlesim.msg.Pose,
    #                  handle_turtle_pose,
    #                  turtlename)
    # rospy.spin()
    rate = rospy.Rate(50)
    while not rospy.is_shutdown():
        br = tf.TransformBroadcaster()
        br.sendTransform((0.0, 0.0, 0.16),
                         tf.transformations.quaternion_from_euler(0, 0, 0),
                         rospy.Time.now(),
                         "camera_link",
                         "base_link")
        br2 = tf.TransformBroadcaster()
        br2.sendTransform((0.0, 0.0, 0.16),
                         tf.transformations.quaternion_from_euler(0, 0, 0),
                         rospy.Time.now(),
                         "base_link",
                         "base_footprint")
        rate.sleep()
        
